on:
  workflow_call:
    inputs:
      DeploymentUrl:
        type: string
        required: true
      

jobs:
  install:
    name: 🔍 Install
    runs-on: ubuntu-latest
    outputs:
      PlaywrightCache: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3     

      - run: yarn --version || npm install -g yarn
        name: 🔗 Install yarn

      - name: 🧱 Node Setup
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 🗄️ Dependency Module Cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}"

      - name: 🔗 Install dependencies
        run: yarn install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      # Figures out the version of playwright that's installed.
      # 1. Because we don't know what version yarn will resolve it to, we have
      #    to use `yarn why` to get the actually installed version.
      # 2. Because we're in a workspace, we need to make sure we get the version
      #    for the root and not any children, hence the `grep`. If not using
      #    workspaces, this can be skipped.
      # 3. jq comes pre-installed in the Ubuntu runner, so we use that to get
      #    the correct version string.
      # 4. Finally, we use sed to extract just the version number (eg; '1.22.0')
      # The result is stored in steps.playwright-version.outputs.version
      - name: 🔍 Get installed Playwright version
        id: playwright-version
        run: echo "::set-output name=version::$(yarn why --json @playwright/test | grep -h 'workspace:.' | jq --raw-output '.children[].locator' | sed -e 's/@playwright\/test@.*://')"

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - uses: actions/cache@v3
        id: playwright-cache
        name: 🌐 Playwright Browser Cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
      - name: 🌐 Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

  test:
    name: 🧪 Test (${{ matrix.shard }}/${{ strategy.job-total }})
    needs: install
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        name: 🌐 Playwright Browser Cache
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{needs.install.outputs.PlaywrightCache}}'

      #We have the browser binaries but annoyingly this doesn't include any host dependencies
      - name: 🌐 Install Playwright's dependencies
        run: npx playwright install --with-deps

      - name: 🧱 Node Setup
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - run: yarn --version || npm install --location=global yarn
        name: 🔗 Install yarn

      - name: 🗄️ Dependency Module Cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}"      

      - name: 🔗 Install dependencies
        run: yarn install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      - name: 🧪 Run Playwright tests
        run: yarn workspace @myhill-cycling/astra-web.site test --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        env:
          TEST_URL: ${{ inputs.DeploymentUrl }}

      - uses: actions/upload-artifact@v3
        name: 🛑 Upload failures
        if: failure()
        with:
          name: playwright-results-${{ matrix.shard }}_${{ strategy.job-total }}
          path: test-results
      
      - uses: actions/upload-artifact@v3
        name: 📋 Upload report
        if: always()
        with:
          name: playwright-report-${{ matrix.shard }}_${{ strategy.job-total }}
          path: playwright-report
