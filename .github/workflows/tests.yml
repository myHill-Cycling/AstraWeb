on:
  workflow_call:
    inputs:
      WebsiteArtifactName:
        description: "The name of the artifact containing the built website"
        type: string
        required: true

jobs:
  install:
    name: 🔍 Install
    runs-on: ubuntu-latest
    outputs:
      PlaywrightCache: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3     

      - name: 🧱 Node Setup
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 🗄️ Dependency Module Cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}"   

      - name: 🔗 Install dependencies
        run: yarn install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      # Figures out the version of playwright that's installed.
      # 1. Because we don't know what version yarn will resolve it to, we have
      #    to use `yarn why` to get the actually installed version.
      # 2. Because we're in a workspace, we need to make sure we get the version
      #    for the root and not any children, hence the `grep`. If not using
      #    workspaces, this can be skipped.
      # 3. jq comes pre-installed in the Ubuntu runner, so we use that to get
      #    the correct version string.
      # 4. Finally, we use sed to extract just the version number (eg; '1.22.0')
      # The result is stored in steps.playwright-version.outputs.version
      - name: 🔍 Get installed Playwright version
        id: playwright-version
        run: echo "::set-output name=version::$(yarn why --json @playwright/test | grep -h 'workspace:.' | jq --raw-output '.children[].locator' | sed -e 's/@playwright\/test@.*://')"

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - uses: actions/cache@v3
        id: playwright-cache
        name: 🌐 Playwright Browser Cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
      - name: 🌐 Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

  test:
    name: 🧪 Test (${{ matrix.shard }}/${{ strategy.job-total }})
    needs: install
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3      

      - name: 📦 Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.WebsiteArtifactName }}
          # download all files into "dist" folder
          path: dist

      - uses: actions/cache@v3
        name: 🌐 Playwright Browser Cache
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{needs.install.outputs.PlaywrightCache}}'

      - name: 🧱 Node Setup
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 🗄️ Dependency Module Cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}"      

      - name: 🔗 Install dependencies
        run: yarn install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      - name: 🧪 Run Playwright tests
        run: yarn test --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      
      - uses: actions/upload-artifact@v3
        name: 📋 Upload report
        if: always()
        with:
          name: playwright-report-${{ env.GITHUB_RUN_ID }}-${{ matrix.shard }}_${{ strategy.job-total }}
          path: playwright-report

  report:
    name: 🛂 Report test results
    runs-on: ubuntu-latest
    steps:    
      - uses: dorny/test-reporter@v1
        name: 👔 Reporter
        with:
          # Name or regex of artifact containing test results
          # Regular expression must be enclosed in '/'.
          # Values from captured groups will replace occurrences of $N in report name.
          # Example:
          #   artifact: /test-results-(.*)/
          #   name: 'Test report $1'
          #   -> Artifact 'test-result-ubuntu' would create report 'Test report ubuntu'
          artifact: '/playwright-report-${{ env.GITHUB_RUN_ID }}-(.*)/'

          # Name of the Check Run which will be created
          name: 'Test Report'

          # Coma separated list of paths to test results
          # Supports wildcards via [fast-glob](https://github.com/mrmlnc/fast-glob)
          # All matched result files must be of the same format
          path: 'results.xml'

          # The fast-glob library that is internally used interprets backslashes as escape characters.
          # If enabled, all backslashes in provided path will be replaced by forward slashes and act as directory separators.
          # It might be useful when path input variable is composed dynamically from existing directory paths on Windows.
          path-replace-backslashes: 'false'

          # Format of test results. Supported options:
          #   dart-json
          #   dotnet-trx
          #   flutter-json
          #   java-junit
          #   jest-junit
          #   mocha-json
          reporter: 'jest-junit'

          # Allows you to generate only the summary.
          # If enabled, the report will contain a table listing each test results file and the number of passed, failed, and skipped tests.
          # Detailed listing of test suites and test cases will be skipped.
          only-summary: 'false'

          # Limits which test suites are listed:
          #   all
          #   failed
          list-suites: 'all'

          # Limits which test cases are listed:
          #   all
          #   failed
          #   none
          list-tests: 'all'

          max-annotations: 0
